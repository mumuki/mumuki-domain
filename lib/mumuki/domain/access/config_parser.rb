#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'

#
module Mumuki
  module Domain
    module Access
      class ConfigParser < Racc::Parser

module_eval(<<'...end config_parser.y/module_eval...', 'config_parser.y', 24)

  def parse(string)
    @q = tokenize(string)
    @q.push [false, '$end']
    do_parse
  end

  def tokenize(string)
    string
      .scan(/"([^"]*)"|(\w+|;)/)
      .map do |str, token|
        str ? [:STRING, str] : [token, token]
      end
  end

  def next_token
    @q.shift
  end
...end config_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    19,    20,    21,    22,    23,    24,    25,    26,    12,
    13,     6,    14,    15,     4,     5,     4,     5,     9,    10,
    16,    27,    28,    29 ]

racc_action_check = [
    12,    12,    12,    12,    12,    12,    12,    12,    12,     8,
     8,     1,     8,     8,     0,     0,     2,     2,     3,     6,
    11,    13,    14,    15 ]

racc_action_pointer = [
    11,    11,    13,    13,   nil,   nil,    19,   nil,     3,   nil,
   nil,    18,   -11,    13,    17,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -21,    -1,   -21,    -4,    -5,   -21,    -2,    -7,    -6,
    30,   -21,   -21,   -21,   -21,   -21,    -3,    -8,   -12,   -13,
   -14,   -15,   -16,   -17,   -18,   -19,   -20,    -9,   -10,   -11 ]

racc_goto_table = [
     1,     8,     7,    11,    17 ]

racc_goto_check = [
     1,     4,     1,     5,     6 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,    -2,    -5,    -8 ]

racc_goto_default = [
   nil,   nil,     2,     3,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 21, :_reduce_1,
  2, 21, :_reduce_2,
  4, 22, :_reduce_3,
  1, 23, :_reduce_4,
  1, 23, :_reduce_5,
  1, 24, :_reduce_none,
  0, 25, :_reduce_7,
  2, 25, :_reduce_8,
  2, 25, :_reduce_9,
  2, 25, :_reduce_10,
  2, 25, :_reduce_11,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none ]

racc_reduce_n = 21

racc_shift_n = 30

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "hide" => 3,
  "disable" => 4,
  :STRING => 5,
  "unless" => 6,
  "while" => 7,
  "unready" => 8,
  "until" => 9,
  "at" => 10,
  "student" => 11,
  "teacher" => 12,
  "headmaster" => 13,
  "writer" => 14,
  "editor" => 15,
  "janitor" => 16,
  "moderator" => 17,
  "admin" => 18,
  "owner" => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"hide\"",
  "\"disable\"",
  "STRING",
  "\"unless\"",
  "\"while\"",
  "\"unready\"",
  "\"until\"",
  "\"at\"",
  "\"student\"",
  "\"teacher\"",
  "\"headmaster\"",
  "\"writer\"",
  "\"editor\"",
  "\"janitor\"",
  "\"moderator\"",
  "\"admin\"",
  "\"owner\"",
  "$start",
  "target",
  "access_rule",
  "action",
  "grant",
  "condition",
  "role" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'config_parser.y', 2)
  def _reduce_1(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 3)
  def _reduce_2(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 5)
  def _reduce_3(val, _values, result)
     result = {action: val[0], grant: val[1].to_mumukit_grant}.merge(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 7)
  def _reduce_4(val, _values, result)
     result = :hide
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 8)
  def _reduce_5(val, _values, result)
     result = :disable
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'config_parser.y', 12)
  def _reduce_7(val, _values, result)
     result = {class: AccessRule::Always }
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 13)
  def _reduce_8(val, _values, result)
     result = {class: AccessRule::Unless, role: val[1].to_sym}
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 14)
  def _reduce_9(val, _values, result)
     result = {class: AccessRule::WhileUnready}
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 15)
  def _reduce_10(val, _values, result)
     result = {class: AccessRule::Until, date: DateTime.parse(val[1])}
    result
  end
.,.,

module_eval(<<'.,.,', 'config_parser.y', 16)
  def _reduce_11(val, _values, result)
     result = {class: AccessRule::At, date: DateTime.parse(val[1])}
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class ConfigParser
    end   # module Access
  end   # module Domain
end   # module Mumuki
